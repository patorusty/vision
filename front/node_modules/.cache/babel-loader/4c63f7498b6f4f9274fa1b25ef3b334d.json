{"remainingRequest":"/Users/patorusty/dev/web/vision/front/node_modules/babel-loader/lib/index.js!/Users/patorusty/dev/web/vision/front/node_modules/eslint-loader/index.js??ref--13-0!/Users/patorusty/dev/web/vision/front/src/modules/cobertura.js","dependencies":[{"path":"/Users/patorusty/dev/web/vision/front/src/modules/cobertura.js","mtime":1614396858239},{"path":"/Users/patorusty/dev/web/vision/front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/patorusty/dev/web/vision/front/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/patorusty/dev/web/vision/front/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/patorusty/dev/web/vision/front/src/modules/cobertura.js"],"names":["http","API_URL","state","coberturas","cobertura","cobOriginal","activo","loading","mutations","SET_COBERTURAS","SET_COBERTURA","RESET_COBERTURA","Object","assign","UPDATE_COBERTURA","item","find","id","CREATE_COBERTURA","push","DELETE_COBERTURA","filter","u","actions","getCoberturas","compania_id","commit","getOne","resp","data","getCobertura","updateCobertura","put","status","color","snackText","root","createCobertura","post","deleteCobertura","delete","namespaced","getters"],"mappings":"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","sourcesContent":["import http from \"../http-request\";\n\nconst API_URL = \"/administracion/coberturas\";\n\nconst state = () => ({\n  coberturas: [],\n  cobertura: {\n    cobOriginal: '',\n    activo: 1\n  },\n  loading: false\n});\nconst mutations = {\n  SET_COBERTURAS(state, coberturas) {\n    state.coberturas = coberturas;\n  },\n  SET_COBERTURA(state, cobertura) {\n    state.cobertura = cobertura;\n    state.cobertura.cobOriginal = cobertura.cobertura\n\n  },\n  RESET_COBERTURA(state) {\n    state.cobertura = Object.assign({}, {\n      cobOriginal: '',\n      activo: 1\n    });\n  },\n  UPDATE_COBERTURA(state, cobertura) {\n    const item = state.coberturas.find(\n      item => item.id === cobertura.id\n    );\n    Object.assign(item, cobertura);\n  },\n  CREATE_COBERTURA(state, cobertura) {\n    state.coberturas.push(cobertura);\n  },\n  DELETE_COBERTURA(state, id) {\n    state.coberturas = state.coberturas.filter(u => u.id != id);\n  }\n};\nconst actions = {\n  async getCoberturas({ commit }, compania_id) {\n    const resp = await http.getOne('/coberturas/compania', compania_id);\n    commit(\"SET_COBERTURAS\", resp.data);\n  },\n\n  async getCobertura({ commit }, id) {\n    const resp = await http.getOne(API_URL, id);\n    commit(\"SET_COBERTURA\", resp.data);\n  },\n\n  async updateCobertura({ commit }, cobertura) {\n    const resp = await http.put(\n      API_URL,\n      cobertura.id,\n      cobertura\n    );\n    if (resp.status === 200) {\n      commit(\"UPDATE_COBERTURA\", resp.data);\n      commit(\n        \"snackbar/SHOW_SNACK\",\n        {\n          color: \"success\",\n          snackText: \"Cobertura editada con éxito!\"\n        },\n        { root: true }\n      );\n      return true;\n    } else {\n      commit(\n        \"snackbar/SHOW_SNACK\"({\n          color: \"success\",\n          snackText: \"Algo salió mal...\"\n        }),\n        { root: true }\n      );\n    }\n  },\n\n  async createCobertura({ commit }, cobertura) {\n    const resp = await http.post(API_URL, cobertura);\n    if (resp.status === 201) {\n      commit(\"CREATE_COBERTURA\", resp.data);\n      commit(\n        \"snackbar/SHOW_SNACK\",\n        {\n          color: \"success\",\n          snackText: \"Cobertura creada con éxito!\"\n        },\n        { root: true }\n      );\n      return true;\n    } else {\n      commit(\n        \"snackbar/SHOW_SNACK\",\n        {\n          color: \"red\",\n          snackText: \"Algo salió mal, intente nuevamente...\"\n        },\n        { root: true }\n      );\n    }\n  },\n\n  async deleteCobertura({ commit }, id) {\n    const resp = await http.delete(API_URL, id);\n    if (resp.status === 200) {\n      commit(\"DELETE_COBERTURA\", id);\n      commit(\n        \"snackbar/SHOW_SNACK\",\n        {\n          color: \"success\",\n          snackText: \"Cobertura eliminada con éxito!\"\n        },\n        { root: true }\n      );\n    } else {\n      commit(\n        \"snackbar/SHOW_SNACK\"({\n          color: \"success\",\n          snackText: \"Algo salió mal...\"\n        }),\n        { root: true }\n      );\n    }\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters: {}\n};\n"]}]}